struct HomographyMatrix{T‚ÇÅ <: AbstractMatrix} <: ProjectiveEntity
    ùêá::T‚ÇÅ
end

struct HomographyMatrices{T‚ÇÅ <: AbstractVector{<: HomographyMatrix}} <: ProjectiveEntity
    ‚Ñã::T‚ÇÅ
end

function matrix(entity::HomographyMatrix)
    entity.ùêá
end

function matrices(entity::HomographyMatrices)
    map(x->matrix(x), entity.‚Ñã)
end

HomographyMatrices(camera‚ÇÅ::AbstractCamera, camera‚ÇÇ::AbstractCamera, planes::AbstractVector{<:Union{Plane, EuclideanPlane3D}}) = HomographyMatrices(construct_homography_matrices(camera‚ÇÅ, camera‚ÇÇ, planes,  CartesianSystem(Point(0.0, 0.0, 0.0), Vec(1.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(0.0, 0.0, 1.0))))
HomographyMatrix(camera‚ÇÅ::AbstractCamera, camera‚ÇÇ::AbstractCamera, plane::Union{Plane, EuclideanPlane3D}) = HomographyMatrix(construct_homography_matrix(camera‚ÇÅ, camera‚ÇÇ, plane, CartesianSystem(Point(0.0, 0.0, 0.0), Vec(1.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(0.0, 0.0, 1.0))))

function construct_homography_matrices(camera‚ÇÅ::AbstractCamera, camera‚ÇÇ::AbstractCamera, planes::AbstractVector{<:Union{Plane, EuclideanPlane3D}}, reference_system::AbstractCoordinateSystem)
    ‚Ñã = [HomographyMatrix(construct_homography_matrix(camera‚ÇÅ, camera‚ÇÇ, planes[i], reference_system)) for i = 1:length(planes)]
    return ‚Ñã
end

function construct_homography_matrix(camera‚ÇÅ::AbstractCamera, camera‚ÇÇ::AbstractCamera, plane::Union{Plane, EuclideanPlane3D}, reference_system::AbstractCoordinateSystem)
    model‚ÇÅ = model(camera‚ÇÅ)
    model‚ÇÇ = model(camera‚ÇÇ)
    image_type‚ÇÅ = image_type(camera‚ÇÅ)
    image_system‚ÇÅ = coordinate_system(image_type‚ÇÅ)
    image_type‚ÇÇ = image_type(camera‚ÇÇ)
    image_system‚ÇÇ = coordinate_system(image_type‚ÇÇ)
    return construct_homography_matrix(model‚ÇÅ, model‚ÇÇ, plane, reference_system, image_system‚ÇÅ, image_system‚ÇÇ)
end

function construct_homography_matrix(model‚ÇÅ::AbstractCameraModel, model‚ÇÇ::AbstractCameraModel,  plane::Union{Plane, EuclideanPlane3D},  reference_system::AbstractCoordinateSystem, image_system‚ÇÅ::AbstractPlanarCoordinateSystem, image_system‚ÇÇ::AbstractPlanarCoordinateSystem)
    intrinsics‚ÇÅ = intrinsics(model‚ÇÅ)
    ùêä‚ÇÅ = matrix(intrinsics‚ÇÅ, image_system‚ÇÅ)
    extrinsics‚ÇÅ = extrinsics(model‚ÇÅ)
    ùêë‚ÇÅ‚Ä≤, ùê≠‚ÇÅ‚Ä≤ = ascertain_pose(extrinsics‚ÇÅ, reference_system)
    ùêë‚ÇÅ = transpose(ùêë‚ÇÅ‚Ä≤)
    ùê≠‚ÇÅ = ùê≠‚ÇÅ‚Ä≤
    # Our projection matrix should decompose as [ùêë -ùêë*ùê≠]

    intrinsics‚ÇÇ = intrinsics(model‚ÇÇ)
    ùêä‚ÇÇ = matrix(intrinsics‚ÇÇ, image_system‚ÇÇ)
    extrinsics‚ÇÇ = extrinsics(model‚ÇÇ)
    ùêë‚ÇÇ‚Ä≤, ùê≠‚ÇÇ‚Ä≤ = ascertain_pose(extrinsics‚ÇÇ, reference_system)
    # Our projection matrix should decompose as [ùêë -ùêë*ùê≠]
    ùêë‚ÇÇ = transpose(ùêë‚ÇÇ‚Ä≤)
    ùê≠‚ÇÇ = ùê≠‚ÇÇ‚Ä≤

    # We assume that the plane is given by the vector ùõë =[n -d], where n is the outward
    # normal to the plane and d is the distance from the plane to the origin of the
    # coordinate system.
    ùêß = normal(plane)
    d = distance(plane)

    ùêÄ = ùêä‚ÇÇ*ùêë‚ÇÇ/ùêë‚ÇÅ/ùêä‚ÇÅ
    ùêõ = ùêä‚ÇÇ*ùêë‚ÇÇ*(ùê≠‚ÇÅ - ùê≠‚ÇÇ)
    w = d - ùêß'*ùê≠‚ÇÅ
    ùêØ = inv(ùêä‚ÇÅ')*ùêë‚ÇÅ*ùêß

    ùêá =  w*ùêÄ + ùêõ*ùêØ'
    return ùêá
end
