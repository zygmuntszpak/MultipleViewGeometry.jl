abstract type AbstractPose end
abstract type AbstractCoordinateTransformation end

struct RelativePose{T‚ÇÅ <: AbstractMatrix, T‚ÇÇ <: AbstractVector} <: AbstractPose
    rotation::T‚ÇÅ
    translation::T‚ÇÇ
end

function rotation(pose::AbstractPose)
    @unpack rotation = pose
    return rotation
end

function translation(pose::AbstractPose)
    @unpack translation = pose
    return translation
end

function matrix(pose::AbstractPose)
    @unpack rotation, translation = pose
    ùêÑ = hcat(rotation, translation)
    return ùêÑ
end

RelativePose(src_camera::AbstractCamera, tgt_camera::AbstractCamera) = RelativePose(construct_relative_pose(src_camera, tgt_camera)...)
RelativePose(coordinate_system‚ÇÅ::CartesianSystem, coordinate_system‚ÇÇ::CartesianSystem) = RelativePose(construct_relative_pose(coordinate_system‚ÇÅ, coordinate_system‚ÇÇ)...)

# tgt_camera with respect to src_camera
function construct_relative_pose(src_camera::AbstractCamera, tgt_camera::AbstractCamera)
    src_extrinsics = extrinsics(src_camera)
    tgt_extrinsics = extrinsics(tgt_camera)
    src_camera_system = coordinate_system(src_extrinsics)
    tgt_camera_system = coordinate_system(tgt_extrinsics)
    construct_relative_pose(src_camera_system‚ÇÅ, tgt_camera_system‚ÇÇ)
end

# tgt_system with respect to src_system
function construct_relative_pose(src_coordinate_system::AbstractCoordinateSystem,  tgt_coordinate_system::AbstractCoordinateSystem)
    ùêû‚ÇÅ, ùêû‚ÇÇ, ùêû‚ÇÉ = basis_vectors(src_coordinate_system)
    ùêû‚ÇÅ‚Ä≤, ùêû‚ÇÇ‚Ä≤, ùêû‚ÇÉ‚Ä≤ = basis_vectors(tgt_coordinate_system)
    # ? Mistake, change order TODO ?
    ùê≠ = origin(tgt_coordinate_system) - origin(src_coordinate_system)
    ùêë = inv(hcat(ùêû‚ÇÅ, ùêû‚ÇÇ, ùêû‚ÇÉ)) * hcat(ùêû‚ÇÅ‚Ä≤, ùêû‚ÇÇ‚Ä≤, ùêû‚ÇÉ‚Ä≤)
    ùêë, ùê≠
end

Base.@kwdef struct CoordinateTransformation{T‚ÇÅ <: AbstractCoordinateSystem, T‚ÇÇ <: AbstractCoordinateSystem} <: AbstractCoordinateTransformation
    source::T‚ÇÅ = CartesianSystem()
    target::T‚ÇÇ = CartesianSystem()
    relative_pose = RelativePose(source, target)
end

function rotation(transformation::CoordinateTransformation)
    @unpack relative_pose = transformation
    return rotation(relative_pose)
end

function translation(transformation::CoordinateTransformation)
    @unpack relative_pose = transformation
    return translation(relative_pose)
end
