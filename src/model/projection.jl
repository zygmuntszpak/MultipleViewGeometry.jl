struct Projection{T‚ÇÅ <: AbstractMatrix} <: ProjectiveEntity
    ùêè::T‚ÇÅ
end

function matrix(entity::Projection)
    entity.ùêè
end

Projection(camera::AbstractCamera) = Projection(construct_projection(camera, CartesianSystem(Point(0.0, 0.0, 0.0), Vec(1.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(0.0, 0.0, 1.0))))
Projection(camera::AbstractCamera, world_coordinate_system::AbstractCoordinateSystem) = Projection(construct_projection(camera, world_coordinate_system))
function project(P::Projection, ùí≥::Vector{<: AbstractVector})
    ùêè = matrix(P)
    ‚Ñ≥ = map(ùí≥) do ùêó
        ùê¶ = hom‚Åª¬π(ùêè * hom(ùêó))
    end
    return ‚Ñ≥
end

function back_project(camera::AbstractCamera, ‚Ñ≥::Vector{<: AbstractVector})
    @unpack model, image_type = camera
    @unpack extrinsics, intrinsics = model
    @unpack ùê®, ùêû‚ÇÅ, ùêû‚ÇÇ, ùêû‚ÇÉ = extrinsics
    @unpack coordinate_system = image_type
    @unpack focal_length = intrinsics
    ‚Ñí = map(‚Ñ≥) do ùê¶
        ùê© = ùê® + ùê¶[1] *ùêû‚ÇÅ + ùê¶[2] *ùêû‚ÇÇ + focal_length*ùêû‚ÇÉ
        L = Line3D(ùê®, ùê©)
    end
    return ‚Ñí
end

function construct_projection(camera::AbstractCamera, world_reference_system::AbstractCoordinateSystem)
    @unpack model, image_type = camera
    @unpack coordinate_system = image_type
    construct_projection(model, world_reference_system, coordinate_system)
end

# World reference system is always identity
function construct_projection(model::AbstractCameraModel, world_reference_system::AbstractCoordinateSystem, image_system::AbstractPlanarCoordinateSystem)
    @unpack intrinsics, extrinsics = model
    ùêä = matrix(intrinsics, image_system)
    ùêÑ = matrix(extrinsics, world_reference_system)
    ùêè = ùêä * ùêÑ
    ùêè = ùêè / norm(ùêè) # TODO optionally remove this normalization
    return ùêè
end

function matrix(intrinsics::IntrinsicParameters, image_system::AbstractPlanarCoordinateSystem)
    @unpack focal_length, coordinate_system  = intrinsics
    @unpack skewedness, scale_x, scale_y, principal_point = intrinsics
    ùêû‚ÇÅ, ùêû‚ÇÇ = basis_vectors(image_system)
    ùêû‚ÇÅ‚Ä≤, ùêû‚ÇÇ‚Ä≤ = basis_vectors(coordinate_system)
    f = focal_length
    sx = scale_x
    sy = scale_y
    s = skewedness
    ùê© = principal_point
    # TODO Fix this so that we don't assume that the principal point is at position (0,0)
    ùê≠ = determine_translation(intrinsics, image_system)
    @warn "Need to ensure this `matrix` function takes into account non-zero principal point"
    ùêë = inv(hcat(ùêû‚ÇÅ, ùêû‚ÇÇ)) * hcat(ùêû‚ÇÅ‚Ä≤ , ùêû‚ÇÇ‚Ä≤)
    ùêä = @SMatrix [f*sx f*s ùê©[1]; 0 f*sy ùê©[2]; 0 0 1]
    ùêä‚Ä≤ = vcat(hcat(ùêë', -ùêë'*ùê≠), SMatrix{1,3,Float64}(0,0,1)) * ùêä
    return ùêä‚Ä≤
end

function matrix(extrinsics::ExtrinsicParameters, world_reference_system::CartesianSystem = CartesianSystem(Point(0.0, 0.0, 0.0), Vec(1.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(0.0, 0.0, 1.0)))
    ùêë, ùê≠ = ascertain_pose(extrinsics, world_reference_system)
    ùêÑ = [ùêë' -ùêë'*ùê≠] # TODO convert to static array
    return ùêÑ
end

function ascertain_pose(camera::AbstractCamera, reference_system::CartesianSystem)
    @unpack model = camera
    @unpack extrinsics = model
    return ascertain_pose(extrinsics, reference_system)
end

function ascertain_pose(extrinsics::ExtrinsicParameters, reference_system::CartesianSystem)
    @unpack coordinate_system = extrinsics
    ùêû‚ÇÅ, ùêû‚ÇÇ, ùêû‚ÇÉ = basis_vectors(reference_system)
    ùêû‚ÇÅ‚Ä≤, ùêû‚ÇÇ‚Ä≤, ùêû‚ÇÉ‚Ä≤ = basis_vectors(coordinate_system)
    ùê≠ = origin(coordinate_system) - origin(reference_system)
    ùêë = inv(hcat(ùêû‚ÇÅ, ùêû‚ÇÇ, ùêû‚ÇÉ)) * hcat(ùêû‚ÇÅ‚Ä≤, ùêû‚ÇÇ‚Ä≤, ùêû‚ÇÉ‚Ä≤)
    return ùêë, ùê≠
end

# TODO Incorporate information about the origin of the image coordinate system
function determine_translation(intrinsics::IntrinsicParameters, system::PlanarCartesianSystem)
    @unpack width, height = intrinsics
    ùê≠ = Point(-width / 2, height / 2)
    return ùê≠
end

# TODO Incorporate information about the origin of the image coordinate system
function determine_translation(intrinsics::IntrinsicParameters, system::OpticalSystem)
    ùê≠ = Point(0, 0)
    return ùê≠
end

# TODO Incorporate information about the origin of the image coordinate system
function determine_translation(intrinsics::IntrinsicParameters, system::RasterSystem)
    @unpack width, height = intrinsics
    ùê≠ = Point(-width / 2, -height / 2)
    return ùê≠
end
